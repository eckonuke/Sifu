// Fill out your copyright notice in the Description page of Project Settings.


#include "EnemyFSM.h"
#include <Kismet/GameplayStatics.h>
#include "Player_KYI.h"
#include "HJ_Enemy.h"
#include <Components/CapsuleComponent.h>
#include "HJ_EnemyAnim.h"
#include <GameFramework/CharacterMovementComponent.h>



// Sets default values for this component's properties
UEnemyFSM::UEnemyFSM()
{
	// Set this component to be initialized when the game starts, and to be ticked every frame.  You can turn these features
	// off to improve performance if you don't need them.
	PrimaryComponentTick.bCanEverTick = true;


}


// Called when the game starts
void UEnemyFSM::BeginPlay()
{
	Super::BeginPlay();

	//월드에서 APlayer_KYI 타깃 찾아오기
	auto actor = UGameplayStatics::GetActorOfClass(GetWorld(), APlayer_KYI::StaticClass());

	//APlayer_KYI 타입으로 캐스팅
	target = Cast<APlayer_KYI>(actor);

	//소유 객체 가져오기
	me = Cast<AHJ_Enemy>(GetOwner());
	me->GetCharacterMovement()->MaxWalkSpeed = 300;
	//UEnemyAnim* 할당
	anim = Cast<UHJ_EnemyAnim>(me->GetMesh()->GetAnimInstance());

	//compProjectile=CreateDefaultSubobject< UProjectileMovementComponent>(TEXT("compProject"));

}


// Called every frame
void UEnemyFSM::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)
{
	Super::TickComponent(DeltaTime, TickType, ThisTickFunction);

	switch (mState)
	{
	case EEnemyState::Idle:
		IdleState();
		break;
	case EEnemyState::Move:
		MoveState();
		break;
	case EEnemyState::Attack:
		AttackState();
		break;
	case EEnemyState::Damage:
		DamageState();
		break;
	case EEnemyState::Die:
		DieState();
		break;
	}
}
//대기 상태
void UEnemyFSM::IdleState()
{
	//1. 시간이 흘렀으니까 
	currentTime += GetWorld()->DeltaTimeSeconds;
	//2. 만약 경과 시간이 대기 시간을 초과했다면
	if (currentTime > idleDelayTime)
	{
		//3. 이동 상태로 전환하고 싶다.
		mState = EEnemyState::Move;
		//경과 시간 초기화
		currentTime = 0;

		//Idle 애니메이션 재생
	    //int32 index = FMath::RandRange(0,1);
		anim->PlayDamageAnim(TEXT("Move0"));


		//애니메이션 상태 동기화 
		anim->animState = mState;
	}
}
//이동 상태
void UEnemyFSM::MoveState()
{
	//1.타깃 목적지가 필요하다.
	FVector destination = target->GetActorLocation();

	//2.방향이 필요하다.
	FVector dir = destination - me->GetActorLocation();

	me->AddMovementInput(dir.GetSafeNormal());

	//타깃과 가까워지면 공격 상태로 전환하고 싶다.
	//1. 만약 거리가 공격 범위 안에 들어오면 
	if (dir.Size() < attackRange)
	{
		anim->StopAllMontages(currentTime);
		//2. 공격 상태로 전환하고 싶다.
		mState = EEnemyState::Attack;

		//애니메이션 상태 동기화
		anim->animState = mState;
		 
		//공격 애니메이션 재생 활성화 
		anim->PlayDamageAnim(TEXT("Idle0"));

		//공격 상태 전환 시 대기 시간이 바로 끝나도록 처리
		currentTime = attackDelayTime;



	}
}
//공격 상태
void UEnemyFSM::AttackState()
{
	//목표: 일정 시간에 한 번씩 공격하고 싶다.
	//1. 시간이 흘러야 한다.
	currentTime += GetWorld()->DeltaTimeSeconds;
	//2. 공격 시간이 됐으니까
	if (currentTime > attackDelayTime)
	{
		//3. 공격하고 싶다.
		UE_LOG(LogTemp, Warning, TEXT("Attack!!!"));
		target->HurtAnim0();
		target->OnHitDamage();

		// 경과 시간 초기화
		currentTime = 0;
// 		int32 index = FMath::RandRange(1,3);
// 		FString sectionName = FString::Printf(TEXT("Fight%d"),index);
// 		anim->PlayDamageAnim(TEXT("Fight"));
		anim->PlayDamageAnim(TEXT("Fight2"));


		//anim->bAttackPlay = true;
	}
	//목표: 타깃이 공격 범위를 벗어나면 상태를 이동으로 전환하고 싶다.
	//1. 타깃과의 거리가 필요하다.
	float distance = FVector::Distance(target->GetActorLocation(), me->GetActorLocation());

	//2. 타깃과의 거리가 공격범위를 벗어낫으니까
	if (distance > attackRange)
	{
		//3. 상태를 이동으로 전환하고 싶다.
		mState = EEnemyState::Move;
		anim->PlayDamageAnim(TEXT("Move0"));
		//애니메이션 상태 동기화
		anim->animState = mState;
	}
}

//피격 알림 이벤트 함수
void UEnemyFSM::OnDamageProcess()
{
	//체력 감소
	hp--;
	//만약 체력이 남아있다면 
	if (hp > 0)
	{
		//상태를 피격으로 전환
		mState = EEnemyState::Damage;

		//플레이어한테 맞으면 뒤로 밀려난다
		FVector s = me->GetActorLocation()+(-me->GetActorForwardVector()*200);
		me->SetActorLocation(s);
		currentTime = 0;

		//피격 애니메이션 재생
		anim->PlayDamageAnim(TEXT("Damage0"));
 		//int32 index = FMath::RandRange(0,1);
 		//FString sectionName = FString::Printf(TEXT("Damage%d"),index);
 		//anim->PlayDamageAnim(FName(*sectionName));
	}
	else
	{
		//상태를 죽음으로 전환
		mState = EEnemyState::Die;
		//캡슐 충돌체 비활성화
		me->GetCapsuleComponent()->SetCollisionEnabled(ECollisionEnabled::NoCollision);
		
		//죽음 애니메이션 재생
		anim->PlayDamageAnim(TEXT("Die"));

		////Movement 가 움직여야 할 Component 를 설정
		////AHJ_Enemy* compProjectile = Cast <AHJ_Enemy>(me->GetMesh());

		//me->compProjectile->SetUpdatedComponent(me->GetMesh());
		////초기 속력
		//me->compProjectile->InitialSpeed = 2000;
		////최대 속력
		//me->compProjectile->MaxSpeed = 2000;
		////반동 여부(튕기는 여부)
		//me->compProjectile->bShouldBounce = true;
		////얼마나 잘 튕기게 할 것인지(0 ~ 1)
		//me->compProjectile->Bounciness = 1.0f;
		
	}
	//애니메이션 상태 동기화
	anim->animState = mState;
}
//피격 상태
void UEnemyFSM::DamageState()
{
	//1. 시간이 흘렀으니까 
	currentTime += GetWorld()->DeltaRealTimeSeconds;
	//2. 만약 경과 시간이 대기 시간을 초과했다면
	if (currentTime > damageDelayTime)
	{

	
		//3. 대기 상태로 전환하고 싶다.
		mState = EEnemyState::Idle;
		//경과 시간 초기화
		currentTime = 0;

		anim->PlayDamageAnim(TEXT("Fight0"));
		//애니메이션 상태 동기화
		anim->animState = mState;
	}

	//p=p0+vt;
	//FVector p0 = me -> GetActorLocation();
	// 
	//FVector vt = -me-> GetActorForwardVector();
	// 
	//FVector p = p0 + vt * speed * GetWorld()->DeltaRealTimeSeconds;
	// 
	//me->SetActorLocation(p);


}
//죽음 상태
void UEnemyFSM::DieState()
{

	//아직 죽음 애니메이션이 끝나지 않았다면 
	//바닥까지 내려가지 않도록 처리
	if ( anim->bDieDone == false )
	{
		return;
	}

	
	//계속 아래로 내려가고 싶다. p=p0+vt
	FVector p0 = me->GetActorLocation();
	FVector p = p0 + FVector::DownVector * dieSpeed * GetWorld()->DeltaTimeSeconds;
	me->SetActorLocation(p);

	//1. 만약 2미터 이상 내려왔다면
	if (p.Z < -200.0f)
	{
		//2. 제거시킨다
		me->Destroy();
	}
}

